enum PetSpecies { Dog, Cat, Parrot }

type Pet {
    species: PetSpecies
    name: String
    birthYear: Int
}

input PetsFilter {
    species: PetSpecies
}

enum PetsOrderBy {
    species_ASC,
    species_DESC,
    name_ASC,
    name_DESC,
    birthYear_ASC,
    birthYear_DESC
}

type Address {
    street: String
    city: String
    zipCode: String
    country: String
    coordinates: GeoPosition
}

type GeoPosition {
    latitude: Float
    longitude: Float
}

type User {
    id: ID
    name: String
    pets(filter: PetsFilter, orderBy: [PetsOrderBy], first: Int): [Pet]
    address: Address
}

input UsersFilter {
    id: ID
    name: String
}

enum UsersOrderBy {
    id_ASC,
    id_DESC,
    name_ASC,
    name_DESC
}

type Query {
    allUsers(filter: UsersFilter, orderBy: [UsersOrderBy], first: Int): [User]
}

type Mutation {
    createUser(input: CreateUserInput): User
    updateUser(input: UpdateUserInput): User
    deleteUser(input: DeleteUserInput): User
}

input CreateUserInput {
    name: String
    address: AddressInput
    pets: [PetInput]
}

input UpdateUserInput {
    id: ID
    name: String
    address: AddressInput
}

input AddressInput {
    street: String
    city: String
    zipCode: String
    country: String
    coordinates: GeoPositionInput
}

input GeoPositionInput {
    latitude: Float
    longitude: Float
}

input DeleteUserInput {
    id: ID
}

input PetInput {
    name: String
    species: PetSpecies
    birthYear: Int
}

schema {
    query: Query
    mutation: Mutation
}
