RETURN (
  FOR v_currentEntity1
  IN (
    FOR v_shipment1
    IN @@shipments
    FILTER (v_shipment1._key == @var1)
    LIMIT @var2
    RETURN v_shipment1
  )
  UPDATE v_currentEntity1
  WITH {}
  IN @@shipments
  OPTIONS { mergeObjects: false }
  RETURN NEW._key
)

// --------------------------------

WITH @@deliveries
RETURN DOCUMENT(@@deliveries, @var1)

// --------------------------------

WITH @@deliveries
RETURN DOCUMENT(@@deliveries, @var1)

// --------------------------------

WITH @@deliveries
RETURN (
  FOR v_to1 IN @var1
  FOR v_edge1 IN @@shipments_deliveries
  FILTER v_edge1._to == v_to1
  REMOVE v_edge1 IN @@shipments_deliveries
)

// --------------------------------

WITH @@deliveries
RETURN (
  FOR v_edge1
  IN [ {_from: CONCAT(@var1, FIRST(@v_updatedIds1)), _to: @var2}, {_from: CONCAT(@var3, FIRST(@v_updatedIds1)), _to: @var4} ]
  UPSERT { _from: v_edge1._from, _to: v_edge1._to }
  INSERT v_edge1
  UPDATE {}
  IN @@shipments_deliveries
)

// --------------------------------

WITH @@deliveries, @@shipments
LET v_shipment1 = DOCUMENT(@@shipments, @var1)
RETURN (IS_NULL(v_shipment1) ? null : {
  "shipmentNumber": v_shipment1.`shipmentNumber`
})

// --------------------------------

WITH @@deliveries, @@shipments
RETURN (
  FOR v_currentEntity1
  IN (
    FOR v_delivery1
    IN @@deliveries
    FILTER (v_delivery1._key == @var1)
    LIMIT @var2
    RETURN v_delivery1
  )
  UPDATE v_currentEntity1
  WITH {}
  IN @@deliveries
  OPTIONS { mergeObjects: false }
  RETURN NEW._key
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits
RETURN DOCUMENT(@@handlingUnits, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits
RETURN DOCUMENT(@@handlingUnits, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits
RETURN (
  FOR v_edge1
  IN [ {_from: CONCAT(@var1, FIRST(@v_updatedIds1)), _to: @var2}, {_from: CONCAT(@var3, FIRST(@v_updatedIds1)), _to: @var4} ]
  UPSERT { _from: v_edge1._from, _to: v_edge1._to }
  INSERT v_edge1
  UPDATE {}
  IN @@deliveries_handlingUnits
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN DOCUMENT(@@orders, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  FOR v_to1 IN [@var1]
  FOR v_edge1 IN @@deliveries_order
  FILTER v_edge1._to == v_to1
  REMOVE v_edge1 IN @@deliveries_order
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  UPSERT {_from: CONCAT(@var1, FIRST(@v_updatedIds1))}
  INSERT {_from: CONCAT(@var2, FIRST(@v_updatedIds1)), _to: @var3}
  UPDATE {_from: CONCAT(@var4, FIRST(@v_updatedIds1)), _to: @var5}
  IN @@deliveries_order
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
LET v_delivery1 = DOCUMENT(@@deliveries, @var1)
RETURN (IS_NULL(v_delivery1) ? null : {
  "deliveryNumber": v_delivery1.`deliveryNumber`
})

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  FOR v_currentEntity1
  IN (
    FOR v_delivery1
    IN @@deliveries
    FILTER (v_delivery1._key == @var1)
    LIMIT @var2
    RETURN v_delivery1
  )
  UPDATE v_currentEntity1
  WITH {}
  IN @@deliveries
  OPTIONS { mergeObjects: false }
  RETURN NEW._key
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN DOCUMENT(@@handlingUnits, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN DOCUMENT(@@handlingUnits, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  FOR v_edge1
  IN [ {_from: CONCAT(@var1, FIRST(@v_updatedIds1)), _to: @var2}, {_from: CONCAT(@var3, FIRST(@v_updatedIds1)), _to: @var4} ]
  UPSERT { _from: v_edge1._from, _to: v_edge1._to }
  INSERT v_edge1
  UPDATE {}
  IN @@deliveries_handlingUnits
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN DOCUMENT(@@orders, @var1)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  FOR v_to1 IN [@var1]
  FOR v_edge1 IN @@deliveries_order
  FILTER v_edge1._to == v_to1
  REMOVE v_edge1 IN @@deliveries_order
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN (
  UPSERT {_from: CONCAT(@var1, FIRST(@v_updatedIds1))}
  INSERT {_from: CONCAT(@var2, FIRST(@v_updatedIds1)), _to: @var3}
  UPDATE {_from: CONCAT(@var4, FIRST(@v_updatedIds1)), _to: @var5}
  IN @@deliveries_order
)

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
LET v_delivery1 = DOCUMENT(@@deliveries, @var1)
RETURN (IS_NULL(v_delivery1) ? null : {
  "deliveryNumber": v_delivery1.`deliveryNumber`
})

// --------------------------------

WITH @@deliveries, @@shipments, @@handlingUnits, @@orders
RETURN {
  "updateShipment": @v_updateShipment1,
  "d1": @v_updateDelivery1,
  "d2": @v_updateDelivery2
}
