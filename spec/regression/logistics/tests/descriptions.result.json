{
  "data": {
    "__schema": {
      "types": [
        {
          "name": "Query",
          "description": null,
          "fields": [
            {
              "name": "Country",
              "description": null
            },
            {
              "name": "allCountries",
              "description": null
            },
            {
              "name": "_allCountriesMeta",
              "description": null
            },
            {
              "name": "Delivery",
              "description": "A delivery"
            },
            {
              "name": "allDeliveries",
              "description": "A delivery"
            },
            {
              "name": "_allDeliveriesMeta",
              "description": "A delivery"
            },
            {
              "name": "Forwarder",
              "description": null
            },
            {
              "name": "allForwarders",
              "description": null
            },
            {
              "name": "_allForwardersMeta",
              "description": null
            },
            {
              "name": "OnlyRelations",
              "description": null
            },
            {
              "name": "allOnlyRelations",
              "description": null
            },
            {
              "name": "_allOnlyRelationsMeta",
              "description": null
            },
            {
              "name": "HandlingUnit",
              "description": null
            },
            {
              "name": "allHandlingUnits",
              "description": null
            },
            {
              "name": "_allHandlingUnitsMeta",
              "description": null
            },
            {
              "name": "NumberRange",
              "description": null
            },
            {
              "name": "allNumberRanges",
              "description": null
            },
            {
              "name": "_allNumberRangesMeta",
              "description": null
            },
            {
              "name": "SecretKey",
              "description": null
            },
            {
              "name": "allSecretKeys",
              "description": null
            },
            {
              "name": "_allSecretKeysMeta",
              "description": null
            }
          ]
        },
        {
          "name": "ID",
          "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
          "fields": null
        },
        {
          "name": "String",
          "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
          "fields": null
        },
        {
          "name": "Country",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "isoCode",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "_descriptionMeta",
              "description": null
            },
            {
              "name": "totalInvestment",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "DateTime",
          "description": "The `DateTime` scalar type represents a point in time with an optional timezone specifier, in a format specified by ISO 8601.",
          "fields": null
        },
        {
          "name": "TranslationFilter",
          "description": "Filter type for `Translation`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "TranslationOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "Int",
          "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
          "fields": null
        },
        {
          "name": "Translation",
          "description": null,
          "fields": [
            {
              "name": "languageIsoCode",
              "description": null
            },
            {
              "name": "translation",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "_QueryMeta",
          "description": "Provides aggregated information about a collection or list",
          "fields": [
            {
              "name": "count",
              "description": "The number of items in the collection or list, after applying the filter if specified."
            }
          ]
        },
        {
          "name": "CountryFilter",
          "description": "Filter type for `Country`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "CountryOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "Delivery",
          "description": "A delivery",
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "deliveryNumber",
              "description": null
            },
            {
              "name": "serialNumbers",
              "description": "The list of serial numbers associated with this delivery"
            },
            {
              "name": "consignee",
              "description": "The address of the delivery's consignee"
            },
            {
              "name": "contentInfo",
              "description": null
            },
            {
              "name": "_contentInfoMeta",
              "description": null
            },
            {
              "name": "dgInfo",
              "description": null
            },
            {
              "name": "items",
              "description": null
            },
            {
              "name": "_itemsMeta",
              "description": null
            },
            {
              "name": "handlingUnits",
              "description": "The handling units the items of this delivery are packaged in"
            },
            {
              "name": "_handlingUnitsMeta",
              "description": "The handling units the items of this delivery are packaged in"
            },
            {
              "name": "destinationCountry",
              "description": null
            },
            {
              "name": "shippedAt",
              "description": null
            },
            {
              "name": "totalValue",
              "description": null
            },
            {
              "name": "forwarder",
              "description": null
            },
            {
              "name": "destination",
              "description": null
            },
            {
              "name": "defaultValueString",
              "description": null
            },
            {
              "name": "defaultValueString2",
              "description": null
            },
            {
              "name": "defaultValueInt",
              "description": null
            },
            {
              "name": "defaultValueTrue",
              "description": null
            },
            {
              "name": "defaultValueFalse",
              "description": null
            },
            {
              "name": "defaultValueFloat",
              "description": null
            },
            {
              "name": "defaultValueEnum",
              "description": null
            },
            {
              "name": "dynamicData",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "Address",
          "description": null,
          "fields": [
            {
              "name": "street",
              "description": null
            },
            {
              "name": "city",
              "description": null
            },
            {
              "name": "zipCode",
              "description": null
            },
            {
              "name": "country",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "DangerousGoodsInfo",
          "description": null,
          "fields": [
            {
              "name": "unNumber",
              "description": null
            },
            {
              "name": "flashpoint",
              "description": null
            },
            {
              "name": "notices",
              "description": null
            }
          ]
        },
        {
          "name": "DeliveryItemFilter",
          "description": "Filter type for `DeliveryItem`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "DeliveryItemOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "DeliveryItem",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this child entity uniquely within this collection of child entities"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time"
            },
            {
              "name": "itemNumber",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "HandlingUnitFilter",
          "description": "Filter type for `HandlingUnit`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "DeliveryFilter",
          "description": "Filter type for `Delivery`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "StringFilter",
          "description": "Filter type for `String`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "AddressFilter",
          "description": "Filter type for `Address`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "DangerousGoodsInfoFilter",
          "description": "Filter type for `DangerousGoodsInfo`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "ForwarderFilter",
          "description": "Filter type for `Forwarder`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "Boolean",
          "description": "The `Boolean` scalar type represents `true` or `false`.",
          "fields": null
        },
        {
          "name": "Float",
          "description": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ",
          "fields": null
        },
        {
          "name": "Foobarit",
          "description": null,
          "fields": null
        },
        {
          "name": "HandlingUnitOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "HandlingUnit",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "huNumber",
              "description": null
            },
            {
              "name": "delivery",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "Forwarder",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "name",
              "description": null
            },
            {
              "name": "deliveries",
              "description": null
            },
            {
              "name": "_deliveriesMeta",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "DeliveryOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "JSON",
          "description": "The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
          "fields": null
        },
        {
          "name": "ForwarderOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "OnlyRelations",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "deliveries",
              "description": null
            },
            {
              "name": "_deliveriesMeta",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "OnlyRelationsFilter",
          "description": "Filter type for `OnlyRelations`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "OnlyRelationsOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "NumberRange",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "name",
              "description": null
            },
            {
              "name": "number",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "NumberRangeFilter",
          "description": "Filter type for `NumberRange`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "NumberRangeOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "SecretKey",
          "description": null,
          "fields": [
            {
              "name": "id",
              "description": "An auto-generated string that identifies this root entity uniquely among others of the same type"
            },
            {
              "name": "createdAt",
              "description": "The instant this object has been created"
            },
            {
              "name": "updatedAt",
              "description": "The instant this object has been updated the last time (not including relation updates)"
            },
            {
              "name": "key",
              "description": null
            },
            {
              "name": "value",
              "description": null
            },
            {
              "name": "_cursor",
              "description": "Provides a value that can be supplied to the `after` argument for pagination. Depends on the value of the `orderBy` argument."
            }
          ]
        },
        {
          "name": "SecretKeyFilter",
          "description": "Filter type for `SecretKey`.\n\nAll fields in this type are *and*-combined; see the `or` field for *or*-combination.",
          "fields": null
        },
        {
          "name": "SecretKeyOrderBy",
          "description": null,
          "fields": null
        },
        {
          "name": "Mutation",
          "description": "The Mutation type for the namespace \"\"",
          "fields": [
            {
              "name": "createCountry",
              "description": "Creates a new Country"
            },
            {
              "name": "updateCountry",
              "description": "Updates an existing Country"
            },
            {
              "name": "updateAllCountries",
              "description": "Updates Countries that match a specified filter"
            },
            {
              "name": "deleteCountry",
              "description": "Deletes a Country by id or isoCode"
            },
            {
              "name": "deleteAllCountries",
              "description": "Deletes Countries that match a specified filter"
            },
            {
              "name": "createDelivery",
              "description": "Creates a new Delivery"
            },
            {
              "name": "updateDelivery",
              "description": "Updates an existing Delivery"
            },
            {
              "name": "updateAllDeliveries",
              "description": "Updates Deliveries that match a specified filter"
            },
            {
              "name": "deleteDelivery",
              "description": "Deletes a Delivery by id or deliveryNumber"
            },
            {
              "name": "deleteAllDeliveries",
              "description": "Deletes Deliveries that match a specified filter"
            },
            {
              "name": "createForwarder",
              "description": "Creates a new Forwarder"
            },
            {
              "name": "updateForwarder",
              "description": "Updates an existing Forwarder"
            },
            {
              "name": "updateAllForwarders",
              "description": "Updates Forwarders that match a specified filter"
            },
            {
              "name": "deleteForwarder",
              "description": "Deletes a Forwarder by id or name"
            },
            {
              "name": "deleteAllForwarders",
              "description": "Deletes Forwarders that match a specified filter"
            },
            {
              "name": "createOnlyRelations",
              "description": "Creates a new OnlyRelations"
            },
            {
              "name": "updateOnlyRelations",
              "description": "Updates an existing OnlyRelations"
            },
            {
              "name": "deleteOnlyRelations",
              "description": "Deletes a OnlyRelations by id"
            },
            {
              "name": "deleteAllOnlyRelations",
              "description": "Deletes OnlyRelations that match a specified filter"
            },
            {
              "name": "createHandlingUnit",
              "description": "Creates a new HandlingUnit"
            },
            {
              "name": "updateHandlingUnit",
              "description": "Updates an existing HandlingUnit"
            },
            {
              "name": "updateAllHandlingUnits",
              "description": "Updates HandlingUnits that match a specified filter"
            },
            {
              "name": "deleteHandlingUnit",
              "description": "Deletes a HandlingUnit by id"
            },
            {
              "name": "deleteAllHandlingUnits",
              "description": "Deletes HandlingUnits that match a specified filter"
            },
            {
              "name": "createNumberRange",
              "description": "Creates a new NumberRange"
            },
            {
              "name": "updateNumberRange",
              "description": "Updates an existing NumberRange"
            },
            {
              "name": "updateAllNumberRanges",
              "description": "Updates NumberRanges that match a specified filter"
            },
            {
              "name": "deleteNumberRange",
              "description": "Deletes a NumberRange by id"
            },
            {
              "name": "deleteAllNumberRanges",
              "description": "Deletes NumberRanges that match a specified filter"
            },
            {
              "name": "createSecretKey",
              "description": "Creates a new SecretKey"
            },
            {
              "name": "updateSecretKey",
              "description": "Updates an existing SecretKey"
            },
            {
              "name": "updateAllSecretKeys",
              "description": "Updates SecretKeys that match a specified filter"
            },
            {
              "name": "deleteSecretKey",
              "description": "Deletes a SecretKey by id or key"
            },
            {
              "name": "deleteAllSecretKeys",
              "description": "Deletes SecretKeys that match a specified filter"
            }
          ]
        },
        {
          "name": "CreateCountryInput",
          "description": "The create type for the root entity type `Country`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "TranslationInput",
          "description": "The create/update type for the value object type `Translation`.\n\nIf this is used in an update mutation, missing fields are set to `null`.",
          "fields": null
        },
        {
          "name": "UpdateCountryInput",
          "description": "The update type for the root entity type `Country`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllCountriesInput",
          "description": "The update type for the root entity type `Country`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "CreateDeliveryInput",
          "description": "The create type for the root entity type `Delivery`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "AddressInput",
          "description": "The create/update type for the value object type `Address`.\n\nIf this is used in an update mutation, missing fields are set to `null`.",
          "fields": null
        },
        {
          "name": "CreateDangerousGoodsInfoInput",
          "description": "The create type for the entity extension type `DangerousGoodsInfo`.",
          "fields": null
        },
        {
          "name": "CreateDeliveryItemInput",
          "description": "The create type for the child entity type `DeliveryItem`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "CreateHandlingUnitInput",
          "description": "The create type for the root entity type `HandlingUnit`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "CreateForwarderInput",
          "description": "The create type for the root entity type `Forwarder`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "UpdateDeliveryInput",
          "description": "The update type for the root entity type `Delivery`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateDangerousGoodsInfoInput",
          "description": "The update type for the entity extension type `DangerousGoodsInfo`.\n\nIf fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateDeliveryItemInput",
          "description": "The update type for the child entity type `DeliveryItem`.\n\nIf fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllDeliveriesInput",
          "description": "The update type for the root entity type `Delivery`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateForwarderInput",
          "description": "The update type for the root entity type `Forwarder`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllForwardersInput",
          "description": "The update type for the root entity type `Forwarder`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "CreateOnlyRelationsInput",
          "description": "The create type for the root entity type `OnlyRelations`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "UpdateOnlyRelationsInput",
          "description": "The update type for the root entity type `OnlyRelations`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateHandlingUnitInput",
          "description": "The update type for the root entity type `HandlingUnit`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllHandlingUnitsInput",
          "description": "The update type for the root entity type `HandlingUnit`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "CreateNumberRangeInput",
          "description": "The create type for the root entity type `NumberRange`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "UpdateNumberRangeInput",
          "description": "The update type for the root entity type `NumberRange`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllNumberRangesInput",
          "description": "The update type for the root entity type `NumberRange`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "CreateSecretKeyInput",
          "description": "The create type for the root entity type `SecretKey`.\n\nThe fields `id`, `createdAt`, and `updatedAt` are set automatically.",
          "fields": null
        },
        {
          "name": "UpdateSecretKeyInput",
          "description": "The update type for the root entity type `SecretKey`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "UpdateAllSecretKeysInput",
          "description": "The update type for the root entity type `SecretKey`.\n\nThe `updatedAt` field is updated automatically unless only relations are updated. If fields are omitted, their value is left unchanged. Explicitly set fields to `null` to clear their value.",
          "fields": null
        },
        {
          "name": "__Schema",
          "description": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
          "fields": [
            {
              "name": "types",
              "description": "A list of all types supported by this server."
            },
            {
              "name": "queryType",
              "description": "The type that query operations will be rooted at."
            },
            {
              "name": "mutationType",
              "description": "If this server supports mutation, the type that mutation operations will be rooted at."
            },
            {
              "name": "subscriptionType",
              "description": "If this server support subscription, the type that subscription operations will be rooted at."
            },
            {
              "name": "directives",
              "description": "A list of all directives supported by this server."
            }
          ]
        },
        {
          "name": "__Type",
          "description": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
          "fields": [
            {
              "name": "kind",
              "description": null
            },
            {
              "name": "name",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "fields",
              "description": null
            },
            {
              "name": "interfaces",
              "description": null
            },
            {
              "name": "possibleTypes",
              "description": null
            },
            {
              "name": "enumValues",
              "description": null
            },
            {
              "name": "inputFields",
              "description": null
            },
            {
              "name": "ofType",
              "description": null
            }
          ]
        },
        {
          "name": "__TypeKind",
          "description": "An enum describing what kind of type a given `__Type` is.",
          "fields": null
        },
        {
          "name": "__Field",
          "description": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
          "fields": [
            {
              "name": "name",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "args",
              "description": null
            },
            {
              "name": "type",
              "description": null
            },
            {
              "name": "isDeprecated",
              "description": null
            },
            {
              "name": "deprecationReason",
              "description": null
            }
          ]
        },
        {
          "name": "__InputValue",
          "description": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
          "fields": [
            {
              "name": "name",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "type",
              "description": null
            },
            {
              "name": "defaultValue",
              "description": "A GraphQL-formatted string representing the default value for this input value."
            }
          ]
        },
        {
          "name": "__EnumValue",
          "description": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
          "fields": [
            {
              "name": "name",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "isDeprecated",
              "description": null
            },
            {
              "name": "deprecationReason",
              "description": null
            }
          ]
        },
        {
          "name": "__Directive",
          "description": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
          "fields": [
            {
              "name": "name",
              "description": null
            },
            {
              "name": "description",
              "description": null
            },
            {
              "name": "locations",
              "description": null
            },
            {
              "name": "args",
              "description": null
            }
          ]
        },
        {
          "name": "__DirectiveLocation",
          "description": "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
          "fields": null
        }
      ]
    }
  }
}