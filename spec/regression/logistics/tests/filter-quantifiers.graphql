query some {
    allDeliveries(filter: { items_some: { quantity_gt: 10 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

query every {
    allDeliveries(filter: { items_every: { quantity_gt: 10 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

query none {
    allDeliveries(filter: { items_none: { quantity_gt: 10 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

# uses special optimization with IN and array expansion
query some_equals {
    allDeliveries(filter: { items_some: { quantity: 13 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

# should not use said optimization
query every_equals {
    allDeliveries(filter: { items_every: { quantity: 13 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

# can be simplified to equals
query some_like_simple {
    allDeliveries(filter: { items_some: { itemNumber_like: "1001" } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

query some_like_complicated {
    allDeliveries(filter: { items_some: { itemNumber_like: "2%" } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

# can't use any of the optimizations because it uses multiple filters in one object
query some_multiple {
    allDeliveries(filter: { items_some: { quantity_gt: 7, quantity_lt: 15 } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

# should find all because a list that's null is a list that's empty, so all items match anything
query null_list {
    allDeliveries(filter: { serialNumbers_every: { equal: "doesnotexist" } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}

mutation set_empty_list {
    updateDelivery(input: { id: "@{ids/Delivery/1}", serialNumbers: [] }) {
        deliveryNumber
    }
}

# should find all because a list that's null is a list that's empty, so all items match anything
query empty_list {
    allDeliveries(filter: { serialNumbers_every: { equal: "doesnotexist" } }, orderBy: deliveryNumber_ASC) {
        deliveryNumber
    }
}
