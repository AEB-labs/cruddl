"A delivery"
type Delivery
    @rootEntity(
        flexSearch: true
        flexSearchLanguage: DE
        flexSearchOrder: [{ field: "deliveryNumber", direction: ASC }]
    ) {
    deliveryNumber: String @key @unique @flexSearch(includeInSearch: true) # leave this here to catch this case, too (has caused a bug)
    "The list of serial numbers associated with this delivery"
    serialNumbers: [String]
    "The address of the delivery's consignee"
    consignee: Address @flexSearch
    contentInfo: [Translation]
    dgInfo: DangerousGoodsInfo
    items: [DeliveryItem] @flexSearch
    "The handling units the items of this delivery are packaged in"
    handlingUnits: [HandlingUnit] @relation
    "The country to where the delivery should be shipped"
    destinationCountry: Country @reference(keyField: "destinationCountryISOCode")
    destinationCountryISOCode: String @flexSearch

    completionDate: LocalDate @flexSearch

    originCountry: Country @reference # no key field specified ("legacy" mode)
    shippedAt: DateTime

    totalValue: String @roles(readWrite: ["accounting"])
    forwarder: Forwarder @relation

    destination: Address
        @defaultValue(value: { street: "Hauptstra√üe", city: "Stuttgart", zipCode: "70xxx", country: "DE" })
    defaultValueString: String @defaultValue(value: "foo")
    defaultValueString2: String @defaultValue(value: "bar")
    defaultValueInt: Int @defaultValue(value: 42)
    defaultValueTrue: Boolean @defaultValue(value: true)
    defaultValueFalse: Boolean @defaultValue(value: false)
    defaultValueFloat: Float @defaultValue(value: 3.14)
    defaultValueEnum: Foobarit @defaultValue(value: Bar)

    dispatchDate: OffsetDateTime @index @flexSearch
    pickupDate: LocalDate
    pickupTimeStart: LocalTime
    pickupTimeEnd: LocalTime

    dynamicData: JSON

    description: String @flexSearchFulltext(includeInSearch: true)
    colorData: ColorData @flexSearch
    enumFlexSearch: Foobarit @flexSearch
    aText: String @flexSearch #sometimes null in testdata
    aNumber: Int @flexSearch
    recursion: Recursion @flexSearch

    deprecatedField: String @deprecated(reason: "do not use")
    enumWithDeprecation: EnumWithDeprecation

    sometimesNull: String @flexSearch
    caseInsensitiveField: String @flexSearch(caseSensitive: false)
}

enum EnumWithDeprecation {
    A
    B @deprecated(reason: "do not use B")
}

type DeliveryItem @childEntity {
    itemNumber: String @flexSearchFulltext(language: DE)
    quantity: Int @flexSearch
    weightInKg: Float
    handlingUnit: HandlingUnit @reference
    dgInfo: DangerousGoodsInfo
    description: I18nString @flexSearch @flexSearchFulltext
}

type ColorData @entityExtension {
    packageColor: String @flexSearch
}

type Forwarder @rootEntity @roles(readWrite: ["logistics"]) {
    name: String @key
    deliveries: [Delivery] @relation(inverseOf: "forwarder")
}

# this can cause problems in schema generation because some input types might be empty
type OnlyRelations @rootEntity @roles(readWrite: ["allusers"]) {
    deliveries: [Delivery] @relation
}

enum Foobarit {
    Foo
    Bar
    Baz
}

type Recursion @valueObject {
    recursion: Recursion @flexSearch
    name: String @flexSearch
}
