type Hero
    @rootEntity(
        flexSearch: true
        flexSearchOrder: [
            { field: "name", direction: ASC }
            { field: "age", direction: DESC }
            { field: "id", direction: ASC }
        ]
        indices: [{ fields: "missions.date" }]
    ) {
    "The hero's screen name"
    name: String @unique @flexSearch(caseSensitive: false) @flexSearchFulltext(includeInSearch: true)
    age: Int @defaultValue(value: 42) @flexSearch
    nickNames: [String] @flexSearch(caseSensitive: false)
    movies: [Movie] @relation(inverseOf: "heroes")
    skills: [Skill]
    suit: Suit @flexSearch
    morality: Morality
    countryISOCode: String
    country: Country @reference(keyField: "countryISOCode")
    missions: [Mission]
    friends: [Hero] @relation
    moreFriends: [Hero] @collect(path: "friends{0,2}")
    subMissions: [Mission] @collect(path: "missions.subMissions")
    missionsAgain: [Mission] @collect(path: "missions")
    info: JSON
    infoObj: JSONObject
    attributes: StringMap
    timeOfDeath: OffsetDateTime
}

"A heroic mission"
type Mission @childEntity {
    date: OffsetDateTime
    title: String
    subMissions: [Mission]
    hero: Hero @root
}

"A special skill of a superhero"
type Skill @valueObject {
    description: I18nString
    "A value between 0 and 11"
    strength: Float
    skills: [Skill]
}

"A superhero movie"
type Movie @rootEntity {
    name: String
    "All the heroes starring in this movie"
    heroes: [Hero] @relation
    "The real superhero"
    director: Director @relation
    publisher: Publisher @reference
    revenueInUSD: Decimal3 @calcMutations(operators: [ADD])

    relatedMovies: [Movie] @collect(path: "heroes.movies", aggregate: DISTINCT)
    community: [Hero] @collect(path: "heroes.friends{0,2}", aggregate: DISTINCT)
    subMissions: [Mission] @collect(path: "heroes.friends{0,2}.missions.subMissions", aggregate: DISTINCT)
    skillCount: Int @collect(path: "heroes.skills", aggregate: COUNT)
    totalSkillStrength: Float @collect(path: "heroes.skills.strength", aggregate: SUM)
}

"A movie director"
type Director @rootEntity {
    name: String
    movies: [Movie] @relation(inverseOf: "director")
}

"A description of a hero suit"
type Suit @entityExtension {
    "The dominant color of the suit"
    color: String @flexSearch
}

type Country @rootEntity {
    isoCode: String @key
    name: String
}

type Publisher @rootEntity {
    identCode: String @key
    name: String
}

enum Morality {
    GOOD
    EVIL
}

type Delivery @namespace(name: "logistics.delivery") @rootEntity {
    name: String
}

type Root @rootEntity {
    name: String @key
    children: [Child]
    grandchildren: [Grandchild] @collect(path: "children.children")
}

type Child @childEntity {
    name: String
    children: [Grandchild]
    parent: Root @parent
    root: Root @root
}

type Grandchild @childEntity {
    name: String
    parent: Child @parent
    root: Root @root
}

type Root2 @rootEntity {
    name: String @key
    roots: [Root] @relation
    rootGrandchildren: [Grandchild] @collect(path: "roots.children.children")
}
