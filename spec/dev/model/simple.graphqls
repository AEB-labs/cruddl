# @MSF OPT TODO: write Tests
# @MSF OPT TODO: check where @memorize is viable
# @MSF OPT TODO: refactor method names
# @MSF OPT TODO: code comments
# @MSF searching for integer values

"A superhero"
type Hero @rootEntity(quickSearchIndex:true, quickSearchLanguage: DE) {
    "The hero's screen name"
    name: String
    key: String @key
    identity: String @quickSearchIndex @searchable
    fullText: String @quickSearchFulltextIndex
    fullTextEn: String @quickSearchFulltextIndex(language: EN)
    both: String @quickSearchIndex @quickSearchFulltextIndex @searchable
    age: Int @defaultValue(value: 42)
    nickNames: [String]
    movies: [Movie] @relation(inverseOf: "heroes")
    skills: [Skill]
    skill: Skill
    suit: Suit
    morality: Morality  # @MSF VAL TODO: only allow language on Scalars and Enums
    countryISOCode: String
    country: Country @reference(keyField: "countryISOCode")
    missions: [Mission] @quickSearchIndex
    info: JSON
}

"A heroic mission"
type Mission @childEntity(quickSearchLanguage: DE) {
    date: DateTime
    title: String
    identity: String @quickSearchIndex @searchable
    fullText: String @quickSearchFulltextIndex @searchable
    fullTextEn: String @quickSearchFulltextIndex(language: EN) @searchable
    both: String @quickSearchIndex @quickSearchFulltextIndex @searchable
}

"A special skill of a superhero"
type Skill @valueObject {
    description: String
    "A value between 0 and 11"
    strength: Float
    skills: [Skill]
}

"A superhero movie"
type Movie @rootEntity(quickSearchIndex:true, quickSearchLanguage: DE) {
    name: String @quickSearchFulltextIndex @quickSearchIndex @searchable
    "All the heroes starring in this movie"
    heroes: [Hero] @relation # @MSF VAL TODO: do not allow quickSearchIndex for relations
    "The real superhero"
    director: Director @relation
    publisher: Publisher @reference # @MSF VAL TODO: do not allow quickSearchIndex for references
}

"A movie director"
type Director @rootEntity {
    name: String
    movies: [Movie] @relation(inverseOf: "director")
}

"A description of a hero suit"
type Suit @entityExtension {
    "The dominant color of the suit"
    color: String
}

type Country @rootEntity {
    isoCode: String @key
    name: String
}

type Publisher @rootEntity {
    identCode: String @key
    name: String
}

enum Morality {
    GOOD
    EVIL
}

type Delivery @namespace(name: "logistics.delivery") @rootEntity {
    name: String
}
